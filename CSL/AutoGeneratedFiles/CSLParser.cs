//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CSL.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class CSLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, SUBJECT=26, DESCRIPTION=27, TIMEUNITS=28, INT=29, IDENTIFIER=30, 
		WS=31;
	public const int
		RULE_prog = 0, RULE_stat = 1, RULE_expr = 2, RULE_literal = 3, RULE_duration = 4, 
		RULE_datetime = 5, RULE_clock = 6, RULE_hour = 7, RULE_minutes = 8, RULE_date = 9, 
		RULE_dd = 10, RULE_mm = 11, RULE_yyyy = 12, RULE_daysofweek = 13;
	public static readonly string[] ruleNames = {
		"prog", "stat", "expr", "literal", "duration", "datetime", "clock", "hour", 
		"minutes", "date", "dd", "mm", "yyyy", "daysofweek"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "';'", "'('", "')'", "'~'", "'++'", "'+'", "'-'", "'in'", 
		"'<<'", "'>>'", "'<'", "'>'", "'*'", "'Intersect'", "'Union'", "':'", 
		"'/'", "'Monday'", "'Tuesday'", "'Wednesday'", "'Thursday'", "'Friday'", 
		"'Saturday'", "'Sunday'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "SUBJECT", "DESCRIPTION", "TIMEUNITS", "INT", "IDENTIFIER", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CSLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CSLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CSLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1878523912L) != 0)) {
				{
				State = 30;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 28;
					stat();
					}
					break;
				case 2:
					{
					State = 29;
					expr(0);
					}
					break;
				}
				}
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 2, RULE_stat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			Match(IDENTIFIER);
			State = 36;
			Match(T__0);
			State = 37;
			expr(0);
			State = 38;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TildeOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public TildeOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterTildeOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitTildeOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTildeOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AddOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterAddOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitAddOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntersectOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IntersectOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterIntersectOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitIntersectOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntersectOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BeforeOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public BeforeOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterBeforeOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitBeforeOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeforeOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public InOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterInOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitInOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AfterOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AfterOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterAfterOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitAfterOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAfterOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoublePlusOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public DoublePlusOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterDoublePlusOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitDoublePlusOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoublePlusOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnionOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public UnionOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterUnionOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitUnionOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StrictlyAfterOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public StrictlyAfterOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterStrictlyAfterOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitStrictlyAfterOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrictlyAfterOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StrictlyBeforeOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public StrictlyBeforeOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterStrictlyBeforeOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitStrictlyBeforeOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrictlyBeforeOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CSLParser.IDENTIFIER, 0); }
		public IdentifierExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterIdentifierExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitIdentifierExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParenExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterParenExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitParenExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplyOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MultiplyOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterMultiplyOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitMultiplyOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SubtractOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterSubtractOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitSubtractOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				{
				_localctx = new ParenExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 41;
				Match(T__2);
				State = 42;
				expr(0);
				State = 43;
				Match(T__3);
				}
				break;
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case SUBJECT:
			case DESCRIPTION:
			case INT:
				{
				_localctx = new LiteralExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 45;
				literal();
				}
				break;
			case IDENTIFIER:
				{
				_localctx = new IdentifierExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 46;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 87;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 85;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						_localctx = new TildeOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 49;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 50;
						Match(T__4);
						State = 51;
						expr(15);
						}
						break;
					case 2:
						{
						_localctx = new DoublePlusOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 52;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 53;
						Match(T__5);
						State = 54;
						expr(14);
						}
						break;
					case 3:
						{
						_localctx = new AddOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 55;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 56;
						Match(T__6);
						State = 57;
						expr(13);
						}
						break;
					case 4:
						{
						_localctx = new SubtractOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 58;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 59;
						Match(T__7);
						State = 60;
						expr(12);
						}
						break;
					case 5:
						{
						_localctx = new InOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 61;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 62;
						Match(T__8);
						State = 63;
						expr(11);
						}
						break;
					case 6:
						{
						_localctx = new StrictlyBeforeOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 64;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 65;
						Match(T__9);
						State = 66;
						expr(10);
						}
						break;
					case 7:
						{
						_localctx = new StrictlyAfterOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 67;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 68;
						Match(T__10);
						State = 69;
						expr(9);
						}
						break;
					case 8:
						{
						_localctx = new BeforeOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 70;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 71;
						Match(T__11);
						State = 72;
						expr(8);
						}
						break;
					case 9:
						{
						_localctx = new AfterOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 73;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 74;
						Match(T__12);
						State = 75;
						expr(7);
						}
						break;
					case 10:
						{
						_localctx = new MultiplyOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 76;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 77;
						Match(T__13);
						State = 78;
						expr(6);
						}
						break;
					case 11:
						{
						_localctx = new IntersectOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 79;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 80;
						Match(T__14);
						State = 81;
						expr(5);
						}
						break;
					case 12:
						{
						_localctx = new UnionOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 82;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 83;
						Match(T__15);
						State = 84;
						expr(4);
						}
						break;
					}
					} 
				}
				State = 89;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DaysofweekContext daysofweek() {
			return GetRuleContext<DaysofweekContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBJECT() { return GetToken(CSLParser.SUBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION() { return GetToken(CSLParser.DESCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatetimeContext datetime() {
			return GetRuleContext<DatetimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClockContext clock() {
			return GetRuleContext<ClockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationContext duration() {
			return GetRuleContext<DurationContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 6, RULE_literal);
		try {
			State = 97;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 90;
				daysofweek();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 91;
				Match(SUBJECT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 92;
				Match(DESCRIPTION);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 93;
				date();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 94;
				datetime();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 95;
				clock();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 96;
				duration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(CSLParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEUNITS() { return GetToken(CSLParser.TIMEUNITS, 0); }
		public DurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_duration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterDuration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitDuration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDuration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationContext duration() {
		DurationContext _localctx = new DurationContext(Context, State);
		EnterRule(_localctx, 8, RULE_duration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(INT);
			State = 100;
			Match(TIMEUNITS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatetimeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClockContext clock() {
			return GetRuleContext<ClockContext>(0);
		}
		public DatetimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetime; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterDatetime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitDatetime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatetime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatetimeContext datetime() {
		DatetimeContext _localctx = new DatetimeContext(Context, State);
		EnterRule(_localctx, 10, RULE_datetime);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			date();
			State = 103;
			clock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HourContext hour() {
			return GetRuleContext<HourContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MinutesContext minutes() {
			return GetRuleContext<MinutesContext>(0);
		}
		public ClockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterClock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitClock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClockContext clock() {
		ClockContext _localctx = new ClockContext(Context, State);
		EnterRule(_localctx, 12, RULE_clock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			hour();
			State = 106;
			Match(T__16);
			State = 107;
			minutes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HourContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(CSLParser.INT, 0); }
		public HourContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hour; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterHour(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitHour(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHour(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HourContext hour() {
		HourContext _localctx = new HourContext(Context, State);
		EnterRule(_localctx, 14, RULE_hour);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinutesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(CSLParser.INT, 0); }
		public MinutesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minutes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterMinutes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitMinutes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinutes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MinutesContext minutes() {
		MinutesContext _localctx = new MinutesContext(Context, State);
		EnterRule(_localctx, 16, RULE_minutes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DdContext dd() {
			return GetRuleContext<DdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MmContext mm() {
			return GetRuleContext<MmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public YyyyContext yyyy() {
			return GetRuleContext<YyyyContext>(0);
		}
		public DateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterDate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitDate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateContext date() {
		DateContext _localctx = new DateContext(Context, State);
		EnterRule(_localctx, 18, RULE_date);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			dd();
			State = 114;
			Match(T__17);
			State = 115;
			mm();
			State = 116;
			Match(T__17);
			State = 117;
			yyyy();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(CSLParser.INT, 0); }
		public DdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterDd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitDd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DdContext dd() {
		DdContext _localctx = new DdContext(Context, State);
		EnterRule(_localctx, 20, RULE_dd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(CSLParser.INT, 0); }
		public MmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterMm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitMm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MmContext mm() {
		MmContext _localctx = new MmContext(Context, State);
		EnterRule(_localctx, 22, RULE_mm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YyyyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(CSLParser.INT, 0); }
		public YyyyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yyyy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterYyyy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitYyyy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYyyy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YyyyContext yyyy() {
		YyyyContext _localctx = new YyyyContext(Context, State);
		EnterRule(_localctx, 24, RULE_yyyy);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DaysofweekContext : ParserRuleContext {
		public DaysofweekContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_daysofweek; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterDaysofweek(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitDaysofweek(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDaysofweek(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DaysofweekContext daysofweek() {
		DaysofweekContext _localctx = new DaysofweekContext(Context, State);
		EnterRule(_localctx, 26, RULE_daysofweek);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 66584576L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 14);
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 10);
		case 5: return Precpred(Context, 9);
		case 6: return Precpred(Context, 8);
		case 7: return Precpred(Context, 7);
		case 8: return Precpred(Context, 6);
		case 9: return Precpred(Context, 5);
		case 10: return Precpred(Context, 4);
		case 11: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,31,128,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,1,0,5,
		0,31,8,0,10,0,12,0,34,9,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,3,2,48,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,5,2,86,8,2,10,2,12,2,89,9,2,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,3,3,98,8,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,
		1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,0,
		1,4,14,0,2,4,6,8,10,12,14,16,18,20,22,24,26,0,1,1,0,19,25,135,0,32,1,0,
		0,0,2,35,1,0,0,0,4,47,1,0,0,0,6,97,1,0,0,0,8,99,1,0,0,0,10,102,1,0,0,0,
		12,105,1,0,0,0,14,109,1,0,0,0,16,111,1,0,0,0,18,113,1,0,0,0,20,119,1,0,
		0,0,22,121,1,0,0,0,24,123,1,0,0,0,26,125,1,0,0,0,28,31,3,2,1,0,29,31,3,
		4,2,0,30,28,1,0,0,0,30,29,1,0,0,0,31,34,1,0,0,0,32,30,1,0,0,0,32,33,1,
		0,0,0,33,1,1,0,0,0,34,32,1,0,0,0,35,36,5,30,0,0,36,37,5,1,0,0,37,38,3,
		4,2,0,38,39,5,2,0,0,39,3,1,0,0,0,40,41,6,2,-1,0,41,42,5,3,0,0,42,43,3,
		4,2,0,43,44,5,4,0,0,44,48,1,0,0,0,45,48,3,6,3,0,46,48,5,30,0,0,47,40,1,
		0,0,0,47,45,1,0,0,0,47,46,1,0,0,0,48,87,1,0,0,0,49,50,10,14,0,0,50,51,
		5,5,0,0,51,86,3,4,2,15,52,53,10,13,0,0,53,54,5,6,0,0,54,86,3,4,2,14,55,
		56,10,12,0,0,56,57,5,7,0,0,57,86,3,4,2,13,58,59,10,11,0,0,59,60,5,8,0,
		0,60,86,3,4,2,12,61,62,10,10,0,0,62,63,5,9,0,0,63,86,3,4,2,11,64,65,10,
		9,0,0,65,66,5,10,0,0,66,86,3,4,2,10,67,68,10,8,0,0,68,69,5,11,0,0,69,86,
		3,4,2,9,70,71,10,7,0,0,71,72,5,12,0,0,72,86,3,4,2,8,73,74,10,6,0,0,74,
		75,5,13,0,0,75,86,3,4,2,7,76,77,10,5,0,0,77,78,5,14,0,0,78,86,3,4,2,6,
		79,80,10,4,0,0,80,81,5,15,0,0,81,86,3,4,2,5,82,83,10,3,0,0,83,84,5,16,
		0,0,84,86,3,4,2,4,85,49,1,0,0,0,85,52,1,0,0,0,85,55,1,0,0,0,85,58,1,0,
		0,0,85,61,1,0,0,0,85,64,1,0,0,0,85,67,1,0,0,0,85,70,1,0,0,0,85,73,1,0,
		0,0,85,76,1,0,0,0,85,79,1,0,0,0,85,82,1,0,0,0,86,89,1,0,0,0,87,85,1,0,
		0,0,87,88,1,0,0,0,88,5,1,0,0,0,89,87,1,0,0,0,90,98,3,26,13,0,91,98,5,26,
		0,0,92,98,5,27,0,0,93,98,3,18,9,0,94,98,3,10,5,0,95,98,3,12,6,0,96,98,
		3,8,4,0,97,90,1,0,0,0,97,91,1,0,0,0,97,92,1,0,0,0,97,93,1,0,0,0,97,94,
		1,0,0,0,97,95,1,0,0,0,97,96,1,0,0,0,98,7,1,0,0,0,99,100,5,29,0,0,100,101,
		5,28,0,0,101,9,1,0,0,0,102,103,3,18,9,0,103,104,3,12,6,0,104,11,1,0,0,
		0,105,106,3,14,7,0,106,107,5,17,0,0,107,108,3,16,8,0,108,13,1,0,0,0,109,
		110,5,29,0,0,110,15,1,0,0,0,111,112,5,29,0,0,112,17,1,0,0,0,113,114,3,
		20,10,0,114,115,5,18,0,0,115,116,3,22,11,0,116,117,5,18,0,0,117,118,3,
		24,12,0,118,19,1,0,0,0,119,120,5,29,0,0,120,21,1,0,0,0,121,122,5,29,0,
		0,122,23,1,0,0,0,123,124,5,29,0,0,124,25,1,0,0,0,125,126,7,0,0,0,126,27,
		1,0,0,0,6,30,32,47,85,87,97
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
