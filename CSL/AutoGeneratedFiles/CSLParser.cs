//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CSL.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class CSLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, THILDE=5, COMPLEMENT=6, PLUSPLUS=7, PLUS=8, 
		MINUS=9, IN=10, SBEFORE=11, SAFTER=12, BEFORE=13, AFTER=14, MUL=15, INTERSECTION=16, 
		UNION=17, LITERAL=18, SUBJECT=19, DESCRIPTION=20, DURATION=21, TIMEUNITS=22, 
		DATETIME=23, CLOCK=24, HOUR=25, MINUTES=26, DATE=27, DD=28, MM=29, YYYY=30, 
		INT=31, DAYSOFWEEK=32, IDENTIFIER=33, WS=34;
	public const int
		RULE_prog = 0, RULE_stat = 1, RULE_expr = 2;
	public static readonly string[] ruleNames = {
		"prog", "stat", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "';'", "'('", "')'", "'~'", "'Complement'", "'++'", "'+'", 
		"'-'", "'in'", "'<<'", "'>>'", "'<'", "'>'", "'*'", "'Intersect'", "'Union'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "THILDE", "COMPLEMENT", "PLUSPLUS", "PLUS", 
		"MINUS", "IN", "SBEFORE", "SAFTER", "BEFORE", "AFTER", "MUL", "INTERSECTION", 
		"UNION", "LITERAL", "SUBJECT", "DESCRIPTION", "DURATION", "TIMEUNITS", 
		"DATETIME", "CLOCK", "HOUR", "MINUTES", "DATE", "DD", "MM", "YYYY", "INT", 
		"DAYSOFWEEK", "IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CSLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CSLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CSLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8590196808L) != 0)) {
				{
				State = 8;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 6;
					stat();
					}
					break;
				case 2:
					{
					State = 7;
					expr(0);
					}
					break;
				}
				}
				State = 12;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 2, RULE_stat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			Match(IDENTIFIER);
			State = 14;
			Match(T__0);
			State = 15;
			expr(0);
			State = 16;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TildeOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THILDE() { return GetToken(CSLParser.THILDE, 0); }
		public TildeOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterTildeOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitTildeOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTildeOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(CSLParser.PLUS, 0); }
		public AddOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterAddOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitAddOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntersectOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECTION() { return GetToken(CSLParser.INTERSECTION, 0); }
		public IntersectOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterIntersectOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitIntersectOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntersectOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BeforeOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(CSLParser.BEFORE, 0); }
		public BeforeOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterBeforeOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitBeforeOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeforeOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(CSLParser.IN, 0); }
		public InOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterInOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitInOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AfterOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(CSLParser.AFTER, 0); }
		public AfterOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterAfterOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitAfterOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAfterOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoublePlusOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSPLUS() { return GetToken(CSLParser.PLUSPLUS, 0); }
		public DoublePlusOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterDoublePlusOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitDoublePlusOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoublePlusOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComplementOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLEMENT() { return GetToken(CSLParser.COMPLEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ComplementOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterComplementOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitComplementOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplementOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnionOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(CSLParser.UNION, 0); }
		public UnionOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterUnionOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitUnionOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StrictlyAfterOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAFTER() { return GetToken(CSLParser.SAFTER, 0); }
		public StrictlyAfterOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterStrictlyAfterOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitStrictlyAfterOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrictlyAfterOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StrictlyBeforeOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBEFORE() { return GetToken(CSLParser.SBEFORE, 0); }
		public StrictlyBeforeOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterStrictlyBeforeOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitStrictlyBeforeOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrictlyBeforeOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CSLParser.IDENTIFIER, 0); }
		public IdentifierExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterIdentifierExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitIdentifierExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL() { return GetToken(CSLParser.LITERAL, 0); }
		public LiteralExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParenExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterParenExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitParenExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplyOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(CSLParser.MUL, 0); }
		public MultiplyOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterMultiplyOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitMultiplyOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(CSLParser.MINUS, 0); }
		public SubtractOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterSubtractOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitSubtractOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSLVisitor<TResult> typedVisitor = visitor as ICSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				{
				_localctx = new ParenExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 19;
				Match(T__2);
				State = 20;
				expr(0);
				State = 21;
				Match(T__3);
				}
				break;
			case COMPLEMENT:
				{
				_localctx = new ComplementOpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 23;
				Match(COMPLEMENT);
				State = 24;
				expr(14);
				}
				break;
			case LITERAL:
				{
				_localctx = new LiteralExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 25;
				Match(LITERAL);
				}
				break;
			case IDENTIFIER:
				{
				_localctx = new IdentifierExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 26;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 67;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 65;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						_localctx = new TildeOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 29;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 30;
						Match(THILDE);
						State = 31;
						expr(16);
						}
						break;
					case 2:
						{
						_localctx = new DoublePlusOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 32;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 33;
						Match(PLUSPLUS);
						State = 34;
						expr(14);
						}
						break;
					case 3:
						{
						_localctx = new AddOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 35;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 36;
						Match(PLUS);
						State = 37;
						expr(13);
						}
						break;
					case 4:
						{
						_localctx = new SubtractOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 38;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 39;
						Match(MINUS);
						State = 40;
						expr(12);
						}
						break;
					case 5:
						{
						_localctx = new InOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 41;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 42;
						Match(IN);
						State = 43;
						expr(11);
						}
						break;
					case 6:
						{
						_localctx = new StrictlyBeforeOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 44;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 45;
						Match(SBEFORE);
						State = 46;
						expr(10);
						}
						break;
					case 7:
						{
						_localctx = new StrictlyAfterOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 47;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 48;
						Match(SAFTER);
						State = 49;
						expr(9);
						}
						break;
					case 8:
						{
						_localctx = new BeforeOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 50;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 51;
						Match(BEFORE);
						State = 52;
						expr(8);
						}
						break;
					case 9:
						{
						_localctx = new AfterOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 53;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 54;
						Match(AFTER);
						State = 55;
						expr(7);
						}
						break;
					case 10:
						{
						_localctx = new MultiplyOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 56;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 57;
						Match(MUL);
						State = 58;
						expr(6);
						}
						break;
					case 11:
						{
						_localctx = new IntersectOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 59;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 60;
						Match(INTERSECTION);
						State = 61;
						expr(5);
						}
						break;
					case 12:
						{
						_localctx = new UnionOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 62;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 63;
						Match(UNION);
						State = 64;
						expr(4);
						}
						break;
					}
					} 
				}
				State = 69;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 15);
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 10);
		case 5: return Precpred(Context, 9);
		case 6: return Precpred(Context, 8);
		case 7: return Precpred(Context, 7);
		case 8: return Precpred(Context, 6);
		case 9: return Precpred(Context, 5);
		case 10: return Precpred(Context, 4);
		case 11: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,34,71,2,0,7,0,2,1,7,1,2,2,7,2,1,0,1,0,5,0,9,8,0,10,0,12,0,12,9,0,1,
		1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,28,8,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,
		2,66,8,2,10,2,12,2,69,9,2,1,2,0,1,4,3,0,2,4,0,0,84,0,10,1,0,0,0,2,13,1,
		0,0,0,4,27,1,0,0,0,6,9,3,2,1,0,7,9,3,4,2,0,8,6,1,0,0,0,8,7,1,0,0,0,9,12,
		1,0,0,0,10,8,1,0,0,0,10,11,1,0,0,0,11,1,1,0,0,0,12,10,1,0,0,0,13,14,5,
		33,0,0,14,15,5,1,0,0,15,16,3,4,2,0,16,17,5,2,0,0,17,3,1,0,0,0,18,19,6,
		2,-1,0,19,20,5,3,0,0,20,21,3,4,2,0,21,22,5,4,0,0,22,28,1,0,0,0,23,24,5,
		6,0,0,24,28,3,4,2,14,25,28,5,18,0,0,26,28,5,33,0,0,27,18,1,0,0,0,27,23,
		1,0,0,0,27,25,1,0,0,0,27,26,1,0,0,0,28,67,1,0,0,0,29,30,10,15,0,0,30,31,
		5,5,0,0,31,66,3,4,2,16,32,33,10,13,0,0,33,34,5,7,0,0,34,66,3,4,2,14,35,
		36,10,12,0,0,36,37,5,8,0,0,37,66,3,4,2,13,38,39,10,11,0,0,39,40,5,9,0,
		0,40,66,3,4,2,12,41,42,10,10,0,0,42,43,5,10,0,0,43,66,3,4,2,11,44,45,10,
		9,0,0,45,46,5,11,0,0,46,66,3,4,2,10,47,48,10,8,0,0,48,49,5,12,0,0,49,66,
		3,4,2,9,50,51,10,7,0,0,51,52,5,13,0,0,52,66,3,4,2,8,53,54,10,6,0,0,54,
		55,5,14,0,0,55,66,3,4,2,7,56,57,10,5,0,0,57,58,5,15,0,0,58,66,3,4,2,6,
		59,60,10,4,0,0,60,61,5,16,0,0,61,66,3,4,2,5,62,63,10,3,0,0,63,64,5,17,
		0,0,64,66,3,4,2,4,65,29,1,0,0,0,65,32,1,0,0,0,65,35,1,0,0,0,65,38,1,0,
		0,0,65,41,1,0,0,0,65,44,1,0,0,0,65,47,1,0,0,0,65,50,1,0,0,0,65,53,1,0,
		0,0,65,56,1,0,0,0,65,59,1,0,0,0,65,62,1,0,0,0,66,69,1,0,0,0,67,65,1,0,
		0,0,67,68,1,0,0,0,68,5,1,0,0,0,69,67,1,0,0,0,5,8,10,27,65,67
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
