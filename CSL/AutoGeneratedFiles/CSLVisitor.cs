//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CSL.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="CSLParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface ICSLVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="CSLParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProg([NotNull] CSLParser.ProgContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CSLParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStat([NotNull] CSLParser.StatContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>HideExpr</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitHideExpr([NotNull] CSLParser.HideExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>TildeOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTildeOp([NotNull] CSLParser.TildeOpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AddOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddOp([NotNull] CSLParser.AddOpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IntersectOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIntersectOp([NotNull] CSLParser.IntersectOpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BeforeOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBeforeOp([NotNull] CSLParser.BeforeOpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>InOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInOp([NotNull] CSLParser.InOpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AfterOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAfterOp([NotNull] CSLParser.AfterOpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>RecursiveOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRecursiveOp([NotNull] CSLParser.RecursiveOpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>DoublePlusOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDoublePlusOp([NotNull] CSLParser.DoublePlusOpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ComplementOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitComplementOp([NotNull] CSLParser.ComplementOpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>UnionOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnionOp([NotNull] CSLParser.UnionOpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StrictlyAfterOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStrictlyAfterOp([NotNull] CSLParser.StrictlyAfterOpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StrictlyBeforeOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStrictlyBeforeOp([NotNull] CSLParser.StrictlyBeforeOpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IdentifierExpr</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifierExpr([NotNull] CSLParser.IdentifierExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LiteralExpr</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteralExpr([NotNull] CSLParser.LiteralExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ParenExpr</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenExpr([NotNull] CSLParser.ParenExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>SubtractOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSubtractOp([NotNull] CSLParser.SubtractOpContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CSLParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteral([NotNull] CSLParser.LiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CSLParser.duration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDuration([NotNull] CSLParser.DurationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CSLParser.datetime"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDatetime([NotNull] CSLParser.DatetimeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CSLParser.clock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitClock([NotNull] CSLParser.ClockContext context);
}
