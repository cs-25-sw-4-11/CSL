//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CSL.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class CSLLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, THILDE=5, COMPLEMENT=6, PLUSPLUS=7, PLUS=8, 
		MINUS=9, IN=10, SBEFORE=11, SAFTER=12, BEFORE=13, AFTER=14, MUL=15, INTERSECTION=16, 
		UNION=17, LITERAL=18, SUBJECT=19, DESCRIPTION=20, DURATION=21, TIMEUNITS=22, 
		DATETIME=23, CLOCK=24, HOUR=25, MINUTES=26, DATE=27, DD=28, MM=29, YYYY=30, 
		INT=31, DAYSOFWEEK=32, IDENTIFIER=33, WS=34;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "THILDE", "COMPLEMENT", "PLUSPLUS", "PLUS", 
		"MINUS", "IN", "SBEFORE", "SAFTER", "BEFORE", "AFTER", "MUL", "INTERSECTION", 
		"UNION", "LITERAL", "SUBJECT", "DESCRIPTION", "DURATION", "TIMEUNITS", 
		"DATETIME", "CLOCK", "HOUR", "MINUTES", "DATE", "DD", "MM", "YYYY", "INT", 
		"DAYSOFWEEK", "IDENTIFIER", "WS"
	};


	public CSLLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CSLLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'='", "';'", "'('", "')'", "'~'", "'Complement'", "'++'", "'+'", 
		"'-'", "'in'", "'<<'", "'>>'", "'<'", "'>'", "'*'", "'Intersect'", "'Union'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "THILDE", "COMPLEMENT", "PLUSPLUS", "PLUS", 
		"MINUS", "IN", "SBEFORE", "SAFTER", "BEFORE", "AFTER", "MUL", "INTERSECTION", 
		"UNION", "LITERAL", "SUBJECT", "DESCRIPTION", "DURATION", "TIMEUNITS", 
		"DATETIME", "CLOCK", "HOUR", "MINUTES", "DATE", "DD", "MM", "YYYY", "INT", 
		"DAYSOFWEEK", "IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CSLLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,34,262,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,1,0,1,1,1,1,
		1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,
		12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,3,17,136,8,17,1,18,1,18,4,18,140,8,18,11,18,12,18,141,1,18,1,18,1,19,
		1,19,4,19,148,8,19,11,19,12,19,149,1,19,1,19,1,20,1,20,1,20,1,21,1,21,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,168,8,21,1,22,1,22,1,
		22,1,23,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,
		26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,4,30,194,8,30,11,30,12,30,195,1,
		31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
		31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
		31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
		31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,248,8,31,1,32,1,32,4,32,252,
		8,32,11,32,12,32,253,1,33,4,33,257,8,33,11,33,12,33,258,1,33,1,33,0,0,
		34,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
		14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
		26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,1,0,7,2,0,39,39,92,
		92,2,0,34,34,92,92,2,0,104,104,119,119,1,0,48,57,3,0,65,90,95,95,97,122,
		4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,282,0,1,1,0,0,0,0,3,
		1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
		0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
		1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
		0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
		1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
		0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,1,69,
		1,0,0,0,3,71,1,0,0,0,5,73,1,0,0,0,7,75,1,0,0,0,9,77,1,0,0,0,11,79,1,0,
		0,0,13,90,1,0,0,0,15,93,1,0,0,0,17,95,1,0,0,0,19,97,1,0,0,0,21,100,1,0,
		0,0,23,103,1,0,0,0,25,106,1,0,0,0,27,108,1,0,0,0,29,110,1,0,0,0,31,112,
		1,0,0,0,33,122,1,0,0,0,35,135,1,0,0,0,37,137,1,0,0,0,39,145,1,0,0,0,41,
		153,1,0,0,0,43,167,1,0,0,0,45,169,1,0,0,0,47,172,1,0,0,0,49,176,1,0,0,
		0,51,178,1,0,0,0,53,180,1,0,0,0,55,186,1,0,0,0,57,188,1,0,0,0,59,190,1,
		0,0,0,61,193,1,0,0,0,63,247,1,0,0,0,65,249,1,0,0,0,67,256,1,0,0,0,69,70,
		5,61,0,0,70,2,1,0,0,0,71,72,5,59,0,0,72,4,1,0,0,0,73,74,5,40,0,0,74,6,
		1,0,0,0,75,76,5,41,0,0,76,8,1,0,0,0,77,78,5,126,0,0,78,10,1,0,0,0,79,80,
		5,67,0,0,80,81,5,111,0,0,81,82,5,109,0,0,82,83,5,112,0,0,83,84,5,108,0,
		0,84,85,5,101,0,0,85,86,5,109,0,0,86,87,5,101,0,0,87,88,5,110,0,0,88,89,
		5,116,0,0,89,12,1,0,0,0,90,91,5,43,0,0,91,92,5,43,0,0,92,14,1,0,0,0,93,
		94,5,43,0,0,94,16,1,0,0,0,95,96,5,45,0,0,96,18,1,0,0,0,97,98,5,105,0,0,
		98,99,5,110,0,0,99,20,1,0,0,0,100,101,5,60,0,0,101,102,5,60,0,0,102,22,
		1,0,0,0,103,104,5,62,0,0,104,105,5,62,0,0,105,24,1,0,0,0,106,107,5,60,
		0,0,107,26,1,0,0,0,108,109,5,62,0,0,109,28,1,0,0,0,110,111,5,42,0,0,111,
		30,1,0,0,0,112,113,5,73,0,0,113,114,5,110,0,0,114,115,5,116,0,0,115,116,
		5,101,0,0,116,117,5,114,0,0,117,118,5,115,0,0,118,119,5,101,0,0,119,120,
		5,99,0,0,120,121,5,116,0,0,121,32,1,0,0,0,122,123,5,85,0,0,123,124,5,110,
		0,0,124,125,5,105,0,0,125,126,5,111,0,0,126,127,5,110,0,0,127,34,1,0,0,
		0,128,136,3,63,31,0,129,136,3,37,18,0,130,136,3,39,19,0,131,136,3,53,26,
		0,132,136,3,45,22,0,133,136,3,47,23,0,134,136,3,41,20,0,135,128,1,0,0,
		0,135,129,1,0,0,0,135,130,1,0,0,0,135,131,1,0,0,0,135,132,1,0,0,0,135,
		133,1,0,0,0,135,134,1,0,0,0,136,36,1,0,0,0,137,139,5,39,0,0,138,140,8,
		0,0,0,139,138,1,0,0,0,140,141,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,
		142,143,1,0,0,0,143,144,5,39,0,0,144,38,1,0,0,0,145,147,5,34,0,0,146,148,
		8,1,0,0,147,146,1,0,0,0,148,149,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,
		0,150,151,1,0,0,0,151,152,5,34,0,0,152,40,1,0,0,0,153,154,3,61,30,0,154,
		155,3,43,21,0,155,42,1,0,0,0,156,157,5,115,0,0,157,158,5,101,0,0,158,168,
		5,99,0,0,159,160,5,109,0,0,160,161,5,105,0,0,161,168,5,110,0,0,162,168,
		7,2,0,0,163,164,5,109,0,0,164,165,5,116,0,0,165,168,5,104,0,0,166,168,
		5,121,0,0,167,156,1,0,0,0,167,159,1,0,0,0,167,162,1,0,0,0,167,163,1,0,
		0,0,167,166,1,0,0,0,168,44,1,0,0,0,169,170,3,53,26,0,170,171,3,47,23,0,
		171,46,1,0,0,0,172,173,3,49,24,0,173,174,5,58,0,0,174,175,3,51,25,0,175,
		48,1,0,0,0,176,177,3,61,30,0,177,50,1,0,0,0,178,179,3,61,30,0,179,52,1,
		0,0,0,180,181,3,55,27,0,181,182,5,47,0,0,182,183,3,57,28,0,183,184,5,47,
		0,0,184,185,3,59,29,0,185,54,1,0,0,0,186,187,3,61,30,0,187,56,1,0,0,0,
		188,189,3,61,30,0,189,58,1,0,0,0,190,191,3,61,30,0,191,60,1,0,0,0,192,
		194,7,3,0,0,193,192,1,0,0,0,194,195,1,0,0,0,195,193,1,0,0,0,195,196,1,
		0,0,0,196,62,1,0,0,0,197,198,5,77,0,0,198,199,5,111,0,0,199,200,5,110,
		0,0,200,201,5,100,0,0,201,202,5,97,0,0,202,248,5,121,0,0,203,204,5,84,
		0,0,204,205,5,117,0,0,205,206,5,101,0,0,206,207,5,115,0,0,207,208,5,100,
		0,0,208,209,5,97,0,0,209,248,5,121,0,0,210,211,5,87,0,0,211,212,5,101,
		0,0,212,213,5,100,0,0,213,214,5,110,0,0,214,215,5,101,0,0,215,216,5,115,
		0,0,216,217,5,100,0,0,217,218,5,97,0,0,218,248,5,121,0,0,219,220,5,84,
		0,0,220,221,5,104,0,0,221,222,5,117,0,0,222,223,5,114,0,0,223,224,5,115,
		0,0,224,225,5,100,0,0,225,226,5,97,0,0,226,248,5,121,0,0,227,228,5,70,
		0,0,228,229,5,114,0,0,229,230,5,105,0,0,230,231,5,100,0,0,231,232,5,97,
		0,0,232,248,5,121,0,0,233,234,5,83,0,0,234,235,5,97,0,0,235,236,5,116,
		0,0,236,237,5,117,0,0,237,238,5,114,0,0,238,239,5,100,0,0,239,240,5,97,
		0,0,240,248,5,121,0,0,241,242,5,83,0,0,242,243,5,117,0,0,243,244,5,110,
		0,0,244,245,5,100,0,0,245,246,5,97,0,0,246,248,5,121,0,0,247,197,1,0,0,
		0,247,203,1,0,0,0,247,210,1,0,0,0,247,219,1,0,0,0,247,227,1,0,0,0,247,
		233,1,0,0,0,247,241,1,0,0,0,248,64,1,0,0,0,249,251,7,4,0,0,250,252,7,5,
		0,0,251,250,1,0,0,0,252,253,1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,
		66,1,0,0,0,255,257,7,6,0,0,256,255,1,0,0,0,257,258,1,0,0,0,258,256,1,0,
		0,0,258,259,1,0,0,0,259,260,1,0,0,0,260,261,6,33,0,0,261,68,1,0,0,0,9,
		0,135,141,149,167,195,247,253,258,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
