//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CSL.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class CSLLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, EQUAL=5, SEMICOLON=6, THILDE=7, PLUSPLUS=8, 
		PLUS=9, MINUS=10, SBEFORE=11, SAFTER=12, STAR=13, INTERSECTION=14, UNION=15, 
		SETDIFF=16, SPLIT=17, SUBJECT=18, DESCRIPTION=19, TIMEUNITS=20, COLON=21, 
		DATE=22, INT=23, IDENTIFIER=24, LINE_COMMENT=25, BLOCK_COMMENT=26, WS=27;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "EQUAL", "SEMICOLON", "THILDE", "PLUSPLUS", 
		"PLUS", "MINUS", "SBEFORE", "SAFTER", "STAR", "INTERSECTION", "UNION", 
		"SETDIFF", "SPLIT", "SUBJECT", "DESCRIPTION", "TIMEUNITS", "COLON", "DATE", 
		"INT", "IDENTIFIER", "LINE_COMMENT", "BLOCK_COMMENT", "WS"
	};


	public CSLLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CSLLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'['", "']'", "'='", "';'", "'~'", "'++'", "'+'", 
		"'-'", "'<<'", "'>>'", "'*'", "'&&'", "'||'", "'\\'", "'/'", null, null, 
		null, "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "EQUAL", "SEMICOLON", "THILDE", "PLUSPLUS", 
		"PLUS", "MINUS", "SBEFORE", "SAFTER", "STAR", "INTERSECTION", "UNION", 
		"SETDIFF", "SPLIT", "SUBJECT", "DESCRIPTION", "TIMEUNITS", "COLON", "DATE", 
		"INT", "IDENTIFIER", "LINE_COMMENT", "BLOCK_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CSLLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,27,172,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,0,1,0,1,1,1,1,
		1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,
		10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,
		15,1,15,1,16,1,16,1,17,1,17,4,17,97,8,17,11,17,12,17,98,1,17,1,17,1,18,
		1,18,4,18,105,8,18,11,18,12,18,106,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
		1,19,1,19,1,19,3,19,119,8,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,
		22,4,22,130,8,22,11,22,12,22,131,1,23,1,23,5,23,136,8,23,10,23,12,23,139,
		9,23,1,24,1,24,1,24,1,24,5,24,145,8,24,10,24,12,24,148,9,24,1,24,1,24,
		1,25,1,25,1,25,1,25,5,25,156,8,25,10,25,12,25,159,9,25,1,25,1,25,1,25,
		1,25,1,25,1,26,4,26,167,8,26,11,26,12,26,168,1,26,1,26,1,157,0,27,1,1,
		3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
		31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
		1,0,8,2,0,39,39,92,92,2,0,34,34,92,92,3,0,100,100,104,104,119,119,1,0,
		48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,10,10,13,
		13,3,0,9,10,13,13,32,32,181,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
		0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
		0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
		1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
		0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
		1,0,0,0,0,53,1,0,0,0,1,55,1,0,0,0,3,57,1,0,0,0,5,59,1,0,0,0,7,61,1,0,0,
		0,9,63,1,0,0,0,11,65,1,0,0,0,13,67,1,0,0,0,15,69,1,0,0,0,17,72,1,0,0,0,
		19,74,1,0,0,0,21,76,1,0,0,0,23,79,1,0,0,0,25,82,1,0,0,0,27,84,1,0,0,0,
		29,87,1,0,0,0,31,90,1,0,0,0,33,92,1,0,0,0,35,94,1,0,0,0,37,102,1,0,0,0,
		39,118,1,0,0,0,41,120,1,0,0,0,43,122,1,0,0,0,45,129,1,0,0,0,47,133,1,0,
		0,0,49,140,1,0,0,0,51,151,1,0,0,0,53,166,1,0,0,0,55,56,5,40,0,0,56,2,1,
		0,0,0,57,58,5,41,0,0,58,4,1,0,0,0,59,60,5,91,0,0,60,6,1,0,0,0,61,62,5,
		93,0,0,62,8,1,0,0,0,63,64,5,61,0,0,64,10,1,0,0,0,65,66,5,59,0,0,66,12,
		1,0,0,0,67,68,5,126,0,0,68,14,1,0,0,0,69,70,5,43,0,0,70,71,5,43,0,0,71,
		16,1,0,0,0,72,73,5,43,0,0,73,18,1,0,0,0,74,75,5,45,0,0,75,20,1,0,0,0,76,
		77,5,60,0,0,77,78,5,60,0,0,78,22,1,0,0,0,79,80,5,62,0,0,80,81,5,62,0,0,
		81,24,1,0,0,0,82,83,5,42,0,0,83,26,1,0,0,0,84,85,5,38,0,0,85,86,5,38,0,
		0,86,28,1,0,0,0,87,88,5,124,0,0,88,89,5,124,0,0,89,30,1,0,0,0,90,91,5,
		92,0,0,91,32,1,0,0,0,92,93,5,47,0,0,93,34,1,0,0,0,94,96,5,39,0,0,95,97,
		8,0,0,0,96,95,1,0,0,0,97,98,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,100,
		1,0,0,0,100,101,5,39,0,0,101,36,1,0,0,0,102,104,5,34,0,0,103,105,8,1,0,
		0,104,103,1,0,0,0,105,106,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,
		108,1,0,0,0,108,109,5,34,0,0,109,38,1,0,0,0,110,111,5,109,0,0,111,112,
		5,105,0,0,112,119,5,110,0,0,113,119,7,2,0,0,114,115,5,109,0,0,115,116,
		5,116,0,0,116,119,5,104,0,0,117,119,5,121,0,0,118,110,1,0,0,0,118,113,
		1,0,0,0,118,114,1,0,0,0,118,117,1,0,0,0,119,40,1,0,0,0,120,121,5,58,0,
		0,121,42,1,0,0,0,122,123,3,45,22,0,123,124,5,47,0,0,124,125,3,45,22,0,
		125,126,5,47,0,0,126,127,3,45,22,0,127,44,1,0,0,0,128,130,7,3,0,0,129,
		128,1,0,0,0,130,131,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,46,1,0,
		0,0,133,137,7,4,0,0,134,136,7,5,0,0,135,134,1,0,0,0,136,139,1,0,0,0,137,
		135,1,0,0,0,137,138,1,0,0,0,138,48,1,0,0,0,139,137,1,0,0,0,140,141,5,47,
		0,0,141,142,5,47,0,0,142,146,1,0,0,0,143,145,8,6,0,0,144,143,1,0,0,0,145,
		148,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,149,1,0,0,0,148,146,1,
		0,0,0,149,150,6,24,0,0,150,50,1,0,0,0,151,152,5,47,0,0,152,153,5,42,0,
		0,153,157,1,0,0,0,154,156,9,0,0,0,155,154,1,0,0,0,156,159,1,0,0,0,157,
		158,1,0,0,0,157,155,1,0,0,0,158,160,1,0,0,0,159,157,1,0,0,0,160,161,5,
		42,0,0,161,162,5,47,0,0,162,163,1,0,0,0,163,164,6,25,0,0,164,52,1,0,0,
		0,165,167,7,7,0,0,166,165,1,0,0,0,167,168,1,0,0,0,168,166,1,0,0,0,168,
		169,1,0,0,0,169,170,1,0,0,0,170,171,6,26,0,0,171,54,1,0,0,0,9,0,98,106,
		118,131,137,146,157,168,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
