//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CSL.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ICSLListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class CSLBaseListener : ICSLListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="CSLParser.prog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProg([NotNull] CSLParser.ProgContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CSLParser.prog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProg([NotNull] CSLParser.ProgContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CSLParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStat([NotNull] CSLParser.StatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CSLParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStat([NotNull] CSLParser.StatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>HideExpr</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterHideExpr([NotNull] CSLParser.HideExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>HideExpr</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitHideExpr([NotNull] CSLParser.HideExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TildeOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTildeOp([NotNull] CSLParser.TildeOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TildeOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTildeOp([NotNull] CSLParser.TildeOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AddOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddOp([NotNull] CSLParser.AddOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AddOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddOp([NotNull] CSLParser.AddOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IntersectOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntersectOp([NotNull] CSLParser.IntersectOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IntersectOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntersectOp([NotNull] CSLParser.IntersectOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BeforeOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBeforeOp([NotNull] CSLParser.BeforeOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BeforeOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBeforeOp([NotNull] CSLParser.BeforeOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>InOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInOp([NotNull] CSLParser.InOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>InOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInOp([NotNull] CSLParser.InOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AfterOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAfterOp([NotNull] CSLParser.AfterOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AfterOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAfterOp([NotNull] CSLParser.AfterOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>RecursiveOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRecursiveOp([NotNull] CSLParser.RecursiveOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>RecursiveOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRecursiveOp([NotNull] CSLParser.RecursiveOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DoublePlusOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDoublePlusOp([NotNull] CSLParser.DoublePlusOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DoublePlusOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDoublePlusOp([NotNull] CSLParser.DoublePlusOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ComplementOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterComplementOp([NotNull] CSLParser.ComplementOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ComplementOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitComplementOp([NotNull] CSLParser.ComplementOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>UnionOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnionOp([NotNull] CSLParser.UnionOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>UnionOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnionOp([NotNull] CSLParser.UnionOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>StrictlyAfterOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStrictlyAfterOp([NotNull] CSLParser.StrictlyAfterOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>StrictlyAfterOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStrictlyAfterOp([NotNull] CSLParser.StrictlyAfterOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>StrictlyBeforeOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStrictlyBeforeOp([NotNull] CSLParser.StrictlyBeforeOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>StrictlyBeforeOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStrictlyBeforeOp([NotNull] CSLParser.StrictlyBeforeOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IdentifierExpr</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifierExpr([NotNull] CSLParser.IdentifierExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IdentifierExpr</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifierExpr([NotNull] CSLParser.IdentifierExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralExpr</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralExpr([NotNull] CSLParser.LiteralExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralExpr</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralExpr([NotNull] CSLParser.LiteralExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenExpr</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenExpr([NotNull] CSLParser.ParenExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenExpr</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenExpr([NotNull] CSLParser.ParenExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SubtractOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubtractOp([NotNull] CSLParser.SubtractOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SubtractOp</c>
	/// labeled alternative in <see cref="CSLParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubtractOp([NotNull] CSLParser.SubtractOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CSLParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteral([NotNull] CSLParser.LiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CSLParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteral([NotNull] CSLParser.LiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CSLParser.duration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDuration([NotNull] CSLParser.DurationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CSLParser.duration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDuration([NotNull] CSLParser.DurationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CSLParser.datetime"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDatetime([NotNull] CSLParser.DatetimeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CSLParser.datetime"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDatetime([NotNull] CSLParser.DatetimeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CSLParser.clock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClock([NotNull] CSLParser.ClockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CSLParser.clock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClock([NotNull] CSLParser.ClockContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
