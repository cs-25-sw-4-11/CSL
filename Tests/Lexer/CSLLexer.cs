//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CSL.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class CSLLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, THILDE=7, COMPLEMENT=8, 
		PLUSPLUS=9, PLUS=10, MINUS=11, IN=12, SBEFORE=13, SAFTER=14, BEFORE=15, 
		AFTER=16, MUL=17, INTERSECTION=18, UNION=19, SUBJECT=20, DESCRIPTION=21, 
		DURATION=22, TIMEUNITS=23, DATETIME=24, CLOCK=25, HOUR=26, MINUTES=27, 
		DATE=28, DD=29, MM=30, YYYY=31, INT=32, DAYSOFWEEK=33, LITERAL=34, IDENTIFIER=35, 
		WS=36;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "THILDE", "COMPLEMENT", 
		"PLUSPLUS", "PLUS", "MINUS", "IN", "SBEFORE", "SAFTER", "BEFORE", "AFTER", 
		"MUL", "INTERSECTION", "UNION", "SUBJECT", "DESCRIPTION", "DURATION", 
		"TIMEUNITS", "DATETIME", "CLOCK", "HOUR", "MINUTES", "DATE", "DD", "MM", 
		"YYYY", "INT", "DAYSOFWEEK", "LITERAL", "IDENTIFIER", "WS"
	};


	public CSLLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CSLLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'='", "';'", "'('", "')'", "'['", "']'", "'~'", "'Complement'", 
		"'++'", "'+'", "'-'", "'in'", "'<<'", "'>>'", "'<'", "'>'", "'*'", "'Intersect'", 
		"'Union'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "THILDE", "COMPLEMENT", "PLUSPLUS", 
		"PLUS", "MINUS", "IN", "SBEFORE", "SAFTER", "BEFORE", "AFTER", "MUL", 
		"INTERSECTION", "UNION", "SUBJECT", "DESCRIPTION", "DURATION", "TIMEUNITS", 
		"DATETIME", "CLOCK", "HOUR", "MINUTES", "DATE", "DD", "MM", "YYYY", "INT", 
		"DAYSOFWEEK", "LITERAL", "IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CSLLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,36,270,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,
		11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,
		18,1,18,1,19,1,19,4,19,139,8,19,11,19,12,19,140,1,19,1,19,1,20,1,20,4,
		20,147,8,20,11,20,12,20,148,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,
		22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,167,8,22,1,23,1,23,1,23,1,24,
		1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,
		1,28,1,29,1,29,1,30,1,30,1,31,4,31,193,8,31,11,31,12,31,194,1,32,1,32,
		1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
		1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
		1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
		1,32,1,32,1,32,1,32,1,32,1,32,3,32,247,8,32,1,33,1,33,1,33,1,33,1,33,1,
		33,1,33,3,33,256,8,33,1,34,1,34,4,34,260,8,34,11,34,12,34,261,1,35,4,35,
		265,8,35,11,35,12,35,266,1,35,1,35,0,0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,
		7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
		39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
		63,32,65,33,67,34,69,35,71,36,1,0,7,2,0,39,39,92,92,2,0,34,34,92,92,2,
		0,104,104,119,119,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
		95,97,122,3,0,9,10,13,13,32,32,290,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
		0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
		0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
		0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
		1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
		0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
		1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
		0,1,73,1,0,0,0,3,75,1,0,0,0,5,77,1,0,0,0,7,79,1,0,0,0,9,81,1,0,0,0,11,
		83,1,0,0,0,13,85,1,0,0,0,15,87,1,0,0,0,17,98,1,0,0,0,19,101,1,0,0,0,21,
		103,1,0,0,0,23,105,1,0,0,0,25,108,1,0,0,0,27,111,1,0,0,0,29,114,1,0,0,
		0,31,116,1,0,0,0,33,118,1,0,0,0,35,120,1,0,0,0,37,130,1,0,0,0,39,136,1,
		0,0,0,41,144,1,0,0,0,43,152,1,0,0,0,45,166,1,0,0,0,47,168,1,0,0,0,49,171,
		1,0,0,0,51,175,1,0,0,0,53,177,1,0,0,0,55,179,1,0,0,0,57,185,1,0,0,0,59,
		187,1,0,0,0,61,189,1,0,0,0,63,192,1,0,0,0,65,246,1,0,0,0,67,255,1,0,0,
		0,69,257,1,0,0,0,71,264,1,0,0,0,73,74,5,61,0,0,74,2,1,0,0,0,75,76,5,59,
		0,0,76,4,1,0,0,0,77,78,5,40,0,0,78,6,1,0,0,0,79,80,5,41,0,0,80,8,1,0,0,
		0,81,82,5,91,0,0,82,10,1,0,0,0,83,84,5,93,0,0,84,12,1,0,0,0,85,86,5,126,
		0,0,86,14,1,0,0,0,87,88,5,67,0,0,88,89,5,111,0,0,89,90,5,109,0,0,90,91,
		5,112,0,0,91,92,5,108,0,0,92,93,5,101,0,0,93,94,5,109,0,0,94,95,5,101,
		0,0,95,96,5,110,0,0,96,97,5,116,0,0,97,16,1,0,0,0,98,99,5,43,0,0,99,100,
		5,43,0,0,100,18,1,0,0,0,101,102,5,43,0,0,102,20,1,0,0,0,103,104,5,45,0,
		0,104,22,1,0,0,0,105,106,5,105,0,0,106,107,5,110,0,0,107,24,1,0,0,0,108,
		109,5,60,0,0,109,110,5,60,0,0,110,26,1,0,0,0,111,112,5,62,0,0,112,113,
		5,62,0,0,113,28,1,0,0,0,114,115,5,60,0,0,115,30,1,0,0,0,116,117,5,62,0,
		0,117,32,1,0,0,0,118,119,5,42,0,0,119,34,1,0,0,0,120,121,5,73,0,0,121,
		122,5,110,0,0,122,123,5,116,0,0,123,124,5,101,0,0,124,125,5,114,0,0,125,
		126,5,115,0,0,126,127,5,101,0,0,127,128,5,99,0,0,128,129,5,116,0,0,129,
		36,1,0,0,0,130,131,5,85,0,0,131,132,5,110,0,0,132,133,5,105,0,0,133,134,
		5,111,0,0,134,135,5,110,0,0,135,38,1,0,0,0,136,138,5,39,0,0,137,139,8,
		0,0,0,138,137,1,0,0,0,139,140,1,0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,
		141,142,1,0,0,0,142,143,5,39,0,0,143,40,1,0,0,0,144,146,5,34,0,0,145,147,
		8,1,0,0,146,145,1,0,0,0,147,148,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,
		0,149,150,1,0,0,0,150,151,5,34,0,0,151,42,1,0,0,0,152,153,3,63,31,0,153,
		154,3,45,22,0,154,44,1,0,0,0,155,156,5,115,0,0,156,157,5,101,0,0,157,167,
		5,99,0,0,158,159,5,109,0,0,159,160,5,105,0,0,160,167,5,110,0,0,161,167,
		7,2,0,0,162,163,5,109,0,0,163,164,5,116,0,0,164,167,5,104,0,0,165,167,
		5,121,0,0,166,155,1,0,0,0,166,158,1,0,0,0,166,161,1,0,0,0,166,162,1,0,
		0,0,166,165,1,0,0,0,167,46,1,0,0,0,168,169,3,55,27,0,169,170,3,49,24,0,
		170,48,1,0,0,0,171,172,3,51,25,0,172,173,5,58,0,0,173,174,3,53,26,0,174,
		50,1,0,0,0,175,176,3,63,31,0,176,52,1,0,0,0,177,178,3,63,31,0,178,54,1,
		0,0,0,179,180,3,57,28,0,180,181,5,47,0,0,181,182,3,59,29,0,182,183,5,47,
		0,0,183,184,3,61,30,0,184,56,1,0,0,0,185,186,3,63,31,0,186,58,1,0,0,0,
		187,188,3,63,31,0,188,60,1,0,0,0,189,190,3,63,31,0,190,62,1,0,0,0,191,
		193,7,3,0,0,192,191,1,0,0,0,193,194,1,0,0,0,194,192,1,0,0,0,194,195,1,
		0,0,0,195,64,1,0,0,0,196,197,5,77,0,0,197,198,5,111,0,0,198,199,5,110,
		0,0,199,200,5,100,0,0,200,201,5,97,0,0,201,247,5,121,0,0,202,203,5,84,
		0,0,203,204,5,117,0,0,204,205,5,101,0,0,205,206,5,115,0,0,206,207,5,100,
		0,0,207,208,5,97,0,0,208,247,5,121,0,0,209,210,5,87,0,0,210,211,5,101,
		0,0,211,212,5,100,0,0,212,213,5,110,0,0,213,214,5,101,0,0,214,215,5,115,
		0,0,215,216,5,100,0,0,216,217,5,97,0,0,217,247,5,121,0,0,218,219,5,84,
		0,0,219,220,5,104,0,0,220,221,5,117,0,0,221,222,5,114,0,0,222,223,5,115,
		0,0,223,224,5,100,0,0,224,225,5,97,0,0,225,247,5,121,0,0,226,227,5,70,
		0,0,227,228,5,114,0,0,228,229,5,105,0,0,229,230,5,100,0,0,230,231,5,97,
		0,0,231,247,5,121,0,0,232,233,5,83,0,0,233,234,5,97,0,0,234,235,5,116,
		0,0,235,236,5,117,0,0,236,237,5,114,0,0,237,238,5,100,0,0,238,239,5,97,
		0,0,239,247,5,121,0,0,240,241,5,83,0,0,241,242,5,117,0,0,242,243,5,110,
		0,0,243,244,5,100,0,0,244,245,5,97,0,0,245,247,5,121,0,0,246,196,1,0,0,
		0,246,202,1,0,0,0,246,209,1,0,0,0,246,218,1,0,0,0,246,226,1,0,0,0,246,
		232,1,0,0,0,246,240,1,0,0,0,247,66,1,0,0,0,248,256,3,65,32,0,249,256,3,
		39,19,0,250,256,3,41,20,0,251,256,3,55,27,0,252,256,3,47,23,0,253,256,
		3,49,24,0,254,256,3,43,21,0,255,248,1,0,0,0,255,249,1,0,0,0,255,250,1,
		0,0,0,255,251,1,0,0,0,255,252,1,0,0,0,255,253,1,0,0,0,255,254,1,0,0,0,
		256,68,1,0,0,0,257,259,7,4,0,0,258,260,7,5,0,0,259,258,1,0,0,0,260,261,
		1,0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,70,1,0,0,0,263,265,7,6,0,0,
		264,263,1,0,0,0,265,266,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,268,
		1,0,0,0,268,269,6,35,0,0,269,72,1,0,0,0,9,0,140,148,166,194,246,255,261,
		266,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
