//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CSL.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class CSLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, THILDE=7, COMPLEMENT=8, 
		PLUSPLUS=9, PLUS=10, MINUS=11, IN=12, SBEFORE=13, SAFTER=14, BEFORE=15, 
		AFTER=16, STAR=17, INTERSECTION=18, UNION=19, SUBJECT=20, DESCRIPTION=21, 
		TIMEUNITS=22, COLON=23, DATE=24, DAYSOFWEEK=25, INT=26, IDENTIFIER=27, 
		WS=28;
	public const int
		RULE_prog = 0, RULE_stat = 1, RULE_expr = 2, RULE_literal = 3, RULE_duration = 4, 
		RULE_datetime = 5, RULE_clock = 6;
	public static readonly string[] ruleNames = {
		"prog", "stat", "expr", "literal", "duration", "datetime", "clock"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "';'", "'('", "')'", "'['", "']'", "'~'", "'Complement'", 
		"'++'", "'+'", "'-'", "'in'", "'<<'", "'>>'", "'<'", "'>'", "'*'", "'Intersect'", 
		"'Union'", null, null, null, "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "THILDE", "COMPLEMENT", "PLUSPLUS", 
		"PLUS", "MINUS", "IN", "SBEFORE", "SAFTER", "BEFORE", "AFTER", "STAR", 
		"INTERSECTION", "UNION", "SUBJECT", "DESCRIPTION", "TIMEUNITS", "COLON", 
		"DATE", "DAYSOFWEEK", "INT", "IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CSLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CSLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CSLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 254804264L) != 0)) {
				{
				State = 16;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 14;
					stat();
					}
					break;
				case 2:
					{
					State = 15;
					expr(0);
					}
					break;
				}
				}
				State = 20;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 2, RULE_stat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			Match(IDENTIFIER);
			State = 22;
			Match(T__0);
			State = 23;
			expr(0);
			State = 24;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HideExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public HideExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterHideExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitHideExpr(this);
		}
	}
	public partial class TildeOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THILDE() { return GetToken(CSLParser.THILDE, 0); }
		public TildeOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterTildeOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitTildeOp(this);
		}
	}
	public partial class AddOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(CSLParser.PLUS, 0); }
		public AddOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterAddOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitAddOp(this);
		}
	}
	public partial class IntersectOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECTION() { return GetToken(CSLParser.INTERSECTION, 0); }
		public IntersectOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterIntersectOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitIntersectOp(this);
		}
	}
	public partial class BeforeOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(CSLParser.BEFORE, 0); }
		public BeforeOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterBeforeOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitBeforeOp(this);
		}
	}
	public partial class InOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(CSLParser.IN, 0); }
		public InOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterInOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitInOp(this);
		}
	}
	public partial class AfterOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(CSLParser.AFTER, 0); }
		public AfterOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterAfterOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitAfterOp(this);
		}
	}
	public partial class RecursiveOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(CSLParser.STAR, 0); }
		public RecursiveOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterRecursiveOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitRecursiveOp(this);
		}
	}
	public partial class DoublePlusOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSPLUS() { return GetToken(CSLParser.PLUSPLUS, 0); }
		public DoublePlusOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterDoublePlusOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitDoublePlusOp(this);
		}
	}
	public partial class ComplementOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLEMENT() { return GetToken(CSLParser.COMPLEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ComplementOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterComplementOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitComplementOp(this);
		}
	}
	public partial class UnionOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(CSLParser.UNION, 0); }
		public UnionOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterUnionOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitUnionOp(this);
		}
	}
	public partial class StrictlyAfterOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAFTER() { return GetToken(CSLParser.SAFTER, 0); }
		public StrictlyAfterOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterStrictlyAfterOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitStrictlyAfterOp(this);
		}
	}
	public partial class StrictlyBeforeOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBEFORE() { return GetToken(CSLParser.SBEFORE, 0); }
		public StrictlyBeforeOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterStrictlyBeforeOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitStrictlyBeforeOp(this);
		}
	}
	public partial class IdentifierExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CSLParser.IDENTIFIER, 0); }
		public IdentifierExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterIdentifierExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitIdentifierExpr(this);
		}
	}
	public partial class LiteralExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
	}
	public partial class ParenExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParenExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterParenExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitParenExpr(this);
		}
	}
	public partial class SubtractOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(CSLParser.MINUS, 0); }
		public SubtractOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterSubtractOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitSubtractOp(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				{
				_localctx = new ParenExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 27;
				Match(T__2);
				State = 28;
				expr(0);
				State = 29;
				Match(T__3);
				}
				break;
			case T__4:
				{
				_localctx = new HideExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 31;
				Match(T__4);
				State = 32;
				expr(0);
				State = 33;
				Match(T__5);
				}
				break;
			case COMPLEMENT:
				{
				_localctx = new ComplementOpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 35;
				Match(COMPLEMENT);
				State = 36;
				expr(14);
				}
				break;
			case SUBJECT:
			case DESCRIPTION:
			case DATE:
			case DAYSOFWEEK:
			case INT:
				{
				_localctx = new LiteralExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 37;
				literal();
				}
				break;
			case IDENTIFIER:
				{
				_localctx = new IdentifierExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 38;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 79;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 77;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						_localctx = new TildeOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 41;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 42;
						Match(THILDE);
						State = 43;
						expr(16);
						}
						break;
					case 2:
						{
						_localctx = new DoublePlusOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 44;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 45;
						Match(PLUSPLUS);
						State = 46;
						expr(14);
						}
						break;
					case 3:
						{
						_localctx = new AddOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 47;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 48;
						Match(PLUS);
						State = 49;
						expr(13);
						}
						break;
					case 4:
						{
						_localctx = new SubtractOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 50;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 51;
						Match(MINUS);
						State = 52;
						expr(12);
						}
						break;
					case 5:
						{
						_localctx = new InOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 53;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 54;
						Match(IN);
						State = 55;
						expr(11);
						}
						break;
					case 6:
						{
						_localctx = new StrictlyBeforeOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 56;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 57;
						Match(SBEFORE);
						State = 58;
						expr(10);
						}
						break;
					case 7:
						{
						_localctx = new StrictlyAfterOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 59;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 60;
						Match(SAFTER);
						State = 61;
						expr(9);
						}
						break;
					case 8:
						{
						_localctx = new BeforeOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 62;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 63;
						Match(BEFORE);
						State = 64;
						expr(8);
						}
						break;
					case 9:
						{
						_localctx = new AfterOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 65;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 66;
						Match(AFTER);
						State = 67;
						expr(7);
						}
						break;
					case 10:
						{
						_localctx = new RecursiveOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 68;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 69;
						Match(STAR);
						State = 70;
						expr(6);
						}
						break;
					case 11:
						{
						_localctx = new IntersectOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 71;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 72;
						Match(INTERSECTION);
						State = 73;
						expr(5);
						}
						break;
					case 12:
						{
						_localctx = new UnionOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 74;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 75;
						Match(UNION);
						State = 76;
						expr(4);
						}
						break;
					}
					} 
				}
				State = 81;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYSOFWEEK() { return GetToken(CSLParser.DAYSOFWEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBJECT() { return GetToken(CSLParser.SUBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION() { return GetToken(CSLParser.DESCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(CSLParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatetimeContext datetime() {
			return GetRuleContext<DatetimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClockContext clock() {
			return GetRuleContext<ClockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DurationContext duration() {
			return GetRuleContext<DurationContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 6, RULE_literal);
		try {
			State = 89;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 82;
				Match(DAYSOFWEEK);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 83;
				Match(SUBJECT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 84;
				Match(DESCRIPTION);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 85;
				Match(DATE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 86;
				datetime();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 87;
				clock();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 88;
				duration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(CSLParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEUNITS() { return GetToken(CSLParser.TIMEUNITS, 0); }
		public DurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_duration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterDuration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitDuration(this);
		}
	}

	[RuleVersion(0)]
	public DurationContext duration() {
		DurationContext _localctx = new DurationContext(Context, State);
		EnterRule(_localctx, 8, RULE_duration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(INT);
			State = 92;
			Match(TIMEUNITS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatetimeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(CSLParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClockContext clock() {
			return GetRuleContext<ClockContext>(0);
		}
		public DatetimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetime; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterDatetime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitDatetime(this);
		}
	}

	[RuleVersion(0)]
	public DatetimeContext datetime() {
		DatetimeContext _localctx = new DatetimeContext(Context, State);
		EnterRule(_localctx, 10, RULE_datetime);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			Match(DATE);
			State = 95;
			clock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(CSLParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(CSLParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CSLParser.COLON, 0); }
		public ClockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.EnterClock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSLListener typedListener = listener as ICSLListener;
			if (typedListener != null) typedListener.ExitClock(this);
		}
	}

	[RuleVersion(0)]
	public ClockContext clock() {
		ClockContext _localctx = new ClockContext(Context, State);
		EnterRule(_localctx, 12, RULE_clock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(INT);
			State = 98;
			Match(COLON);
			State = 99;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 15);
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 10);
		case 5: return Precpred(Context, 9);
		case 6: return Precpred(Context, 8);
		case 7: return Precpred(Context, 7);
		case 8: return Precpred(Context, 6);
		case 9: return Precpred(Context, 5);
		case 10: return Precpred(Context, 4);
		case 11: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,28,102,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,1,0,
		1,0,5,0,17,8,0,10,0,12,0,20,9,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,40,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,78,8,2,10,2,12,2,81,
		9,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,90,8,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,
		1,6,1,6,1,6,1,6,0,1,4,7,0,2,4,6,8,10,12,0,0,118,0,18,1,0,0,0,2,21,1,0,
		0,0,4,39,1,0,0,0,6,89,1,0,0,0,8,91,1,0,0,0,10,94,1,0,0,0,12,97,1,0,0,0,
		14,17,3,2,1,0,15,17,3,4,2,0,16,14,1,0,0,0,16,15,1,0,0,0,17,20,1,0,0,0,
		18,16,1,0,0,0,18,19,1,0,0,0,19,1,1,0,0,0,20,18,1,0,0,0,21,22,5,27,0,0,
		22,23,5,1,0,0,23,24,3,4,2,0,24,25,5,2,0,0,25,3,1,0,0,0,26,27,6,2,-1,0,
		27,28,5,3,0,0,28,29,3,4,2,0,29,30,5,4,0,0,30,40,1,0,0,0,31,32,5,5,0,0,
		32,33,3,4,2,0,33,34,5,6,0,0,34,40,1,0,0,0,35,36,5,8,0,0,36,40,3,4,2,14,
		37,40,3,6,3,0,38,40,5,27,0,0,39,26,1,0,0,0,39,31,1,0,0,0,39,35,1,0,0,0,
		39,37,1,0,0,0,39,38,1,0,0,0,40,79,1,0,0,0,41,42,10,15,0,0,42,43,5,7,0,
		0,43,78,3,4,2,16,44,45,10,13,0,0,45,46,5,9,0,0,46,78,3,4,2,14,47,48,10,
		12,0,0,48,49,5,10,0,0,49,78,3,4,2,13,50,51,10,11,0,0,51,52,5,11,0,0,52,
		78,3,4,2,12,53,54,10,10,0,0,54,55,5,12,0,0,55,78,3,4,2,11,56,57,10,9,0,
		0,57,58,5,13,0,0,58,78,3,4,2,10,59,60,10,8,0,0,60,61,5,14,0,0,61,78,3,
		4,2,9,62,63,10,7,0,0,63,64,5,15,0,0,64,78,3,4,2,8,65,66,10,6,0,0,66,67,
		5,16,0,0,67,78,3,4,2,7,68,69,10,5,0,0,69,70,5,17,0,0,70,78,3,4,2,6,71,
		72,10,4,0,0,72,73,5,18,0,0,73,78,3,4,2,5,74,75,10,3,0,0,75,76,5,19,0,0,
		76,78,3,4,2,4,77,41,1,0,0,0,77,44,1,0,0,0,77,47,1,0,0,0,77,50,1,0,0,0,
		77,53,1,0,0,0,77,56,1,0,0,0,77,59,1,0,0,0,77,62,1,0,0,0,77,65,1,0,0,0,
		77,68,1,0,0,0,77,71,1,0,0,0,77,74,1,0,0,0,78,81,1,0,0,0,79,77,1,0,0,0,
		79,80,1,0,0,0,80,5,1,0,0,0,81,79,1,0,0,0,82,90,5,25,0,0,83,90,5,20,0,0,
		84,90,5,21,0,0,85,90,5,24,0,0,86,90,3,10,5,0,87,90,3,12,6,0,88,90,3,8,
		4,0,89,82,1,0,0,0,89,83,1,0,0,0,89,84,1,0,0,0,89,85,1,0,0,0,89,86,1,0,
		0,0,89,87,1,0,0,0,89,88,1,0,0,0,90,7,1,0,0,0,91,92,5,26,0,0,92,93,5,22,
		0,0,93,9,1,0,0,0,94,95,5,24,0,0,95,96,3,12,6,0,96,11,1,0,0,0,97,98,5,26,
		0,0,98,99,5,23,0,0,99,100,5,26,0,0,100,13,1,0,0,0,6,16,18,39,77,79,89
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
